import Head from 'next/head'
import Cookies from 'cookies'
import { useEffect, useState } from 'react'
import { useUser } from '../hoocks/userContext';
import {checkToken} from './api/users/signIn';
import {getAllItem} from './api/items'

const URL = process.env.NEXT_PUBLIC_APP_URL;

export default function Home({ user={}, token_ = '', items_ = []}) {
  
  const [items, setItems] = useState(items_);
  const [textName, setTextName] = useState('');
  const [textDescription, setTextDescription] = useState('');
  const [msg, setMsg] = useState('');
  const {updateData, userName, email, id, logOut, token} = useUser();
  useEffect(()=>{
    console.log("========USEEFFECT Home===================")
    /*const getData = async()=>{
      console.log("Buscando items...");
      const res = await fetch(`http://${URL}/api/items`);
      const _items = await res.json()
      console.log(_items);
      setItems(_items);
      console.log("fim buscando items");
    }
    getData();*/
    if(user!=={}){
      console.log("Atualizando contexto usuário");
      updateData({
        name: user.username,
        email: user.email,
        id: user.id,
        token: token_,
      });
      console.log("Atualizado com sucesso");
    }
    console.log("=============FIM USEEFFECT HOME===========");
  },[])
  const handleCreateItem = async()=>{
    setMsg('');
    if(textName=='' || textDescription==''){
      setMsg("*Preencha todos os campos");
      return;
    }
    const res = await fetch(`http://${URL}/api/items`, {
      method: 'POST',
      body: JSON.stringify({ 
        name: textName,
        description: textDescription
      }),
      headers: { 
        'Content-Type': 'application/json', 
        'token': token,
      },
    })
    const response = await res.json();
    if(response.status){
      setMsg(`${textName} criado com sucesso!`);
      setItems([...items, {name: textName, description: textDescription, id: response.id, username: userName}])
    }else{
      setMsg(`${textName} algo deu errado`);
    }
    setTextName('');
    setTextDescription('');
  }
  const handleDeleteItem = async (id, name)=>{
    const res = await fetch(`http://${URL}/api/items`, {
      method: 'DELETE',
      body: JSON.stringify({ 
        id: id,
      }),
      headers: { 'Content-Type': 'application/json' },
    })
    const response = await res.json();
    if(response.status){
      setMsg(`${name} deletado com sucesso!`);
      setItems(items.filter((item)=>{
        return item.id !== id && item;
      }));
    }else{
      setMsg(`${textName} algo deu errado`);
    }
  }
  const handleLogOut = ()=>{
    logOut();
  }
  return (
    <div style={{minHeight:'100vh'}}>
      <div style={{
        backgroundColor: 'aliceblue', 
        display: 'flex', 
        flexDirection: 'row', 
        justifyContent: 'space-between', 
        padding: '0 50px',
        alignItems: 'center',
      }}>
        <h1>feadonai.ninja</h1>
        <div style={{display: 'flex', flexDirection: 'row', alignItems: 'center'}}>
          <h1>{userName}</h1>
          <button style={{
            marginLeft: '20px', 
            padding: '0 20px', 
            boxShadow: '0 0 0 0',
            borderWidth: '2px',
            borderColor: '#f71',
            outline: 0,
            backgroundColor: 'aliceblue',
            borderRadius: '20px',
          }} onClick={handleLogOut}>
            <h3>LogOut</h3> 
          </button>
        </div>
      </div>
      <div style={{
        display: 'flex', 
        flexDirection: 'column',  
        padding: '50px',
        backgroundColor: '#f71',
      }}>
        <Head>
          <title>Home</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div style={{
          display:'flex', 
          flexDirection: 'column', 
          alignItems: 'center', 
          justifyContent: 'center',
          padding: '20px',
          alignSelf: 'center',
          width: 'fit-content',
          backgroundColor: 'aliceblue',
          borderRadius: '20px',
        }}>
          <h2>Titulo: </h2>
          <input 
            style={{
              borderRadius: '20px',
              padding: '5px 20px',
              boxShadow: '0 0 0 0',
              borderWidth: '2px',
              borderColor: '#f71',
              outline: 0,
            }}
            typeof="text" 
            placeholder="Nome"
            value={textName}
            onChange={(e)=>setTextName(e.target.value)}
          ></input>
          <h2>Descrição: </h2>
          <input 
            style={{
              borderRadius: '20px',
              padding: '5px 20px',
              boxShadow: '0 0 0 0',
              borderWidth: '2px',
              borderColor: '#f71',
              outline: 0,
            }}
            typeof="text" 
            placeholder="Description"
            value={textDescription}
            onChange={(e)=>setTextDescription(e.target.value)}
          ></input>
          <button 
            onClick={handleCreateItem}
            style={{
              marginTop: '20px', 
              borderRadius: '20px', 
              padding: '10px 20px',
              boxShadow: '0 0 0 0',
              borderWidth: '2px',
              borderColor: '#f71',
              outline: 0,
              backgroundColor: 'aliceblue'
            }}
          >Criar item</button>
          <p style={{color: '#f00', marginTop: '20px', fontSize: '12px', visibility: msg===''&&'hidden'}}>{msg===''?'.':msg}</p>
        </div>
        <div>
          {items.length>0 && items.map((item)=>{
            return(
              <div style={{display: 'flex', flexDirection: 'column'}} key={item.id}>
                <h1 style={{
                  margin: 0,     
                  position: 'absolute',
                  backgroundColor: item.username===userName?'#f71':'aliceblue',
                  padding: '5px 20px',
                  borderWidth: '2px',
                  borderColor: '#f71',
                  borderTopLeftRadius: '20px',
                  borderTopRightRadius: '20px',
                }}>{item.username}</h1>
                <div style={{
                  margin: '20px 0',
                  backgroundColor: item.username===userName?'#f71':'aliceblue',
                  display: 'flex',
                  flexDirection: 'row',
                  justifyContent: 'space-between',
                  borderRadius: '20px',
                  borderWidth: '2px',
                  borderColor: item.username===userName?'aliceblue':'#f71',
                  borderStyle: item.username===userName?'dotted':'none',
                }}>
                  <div style={{
                    padding: '5px 20px',
                    display: 'flex',
                    flexDirection: 'column',
                    justifyContent: 'space-around',
                    minHeight: '64x',
                  }}>
                    <h2 style={{margin: '26px 0 5px 0'}}><strong><label>{item.name}</label></strong></h2>
                    <p style={{margin: '0 0 5px 0'}}><label>{item.description}</label></p>
                  </div>
                  <button 
                    onClick={()=>handleDeleteItem(item.id, item.name)}
                    style={{
                      borderRadius: '20px', 
                      padding: '10px 20px',
                      boxShadow: '0 0 0 0',
                      borderWidth: '2px',
                      borderColor: '#f71',
                      outline: 0,
                      backgroundColor: 'aliceblue'
                    }} 
                  >Deletar</button>
                </div>
              </div>
            );
          })}
        </div>
      </div>
    </div>
  )
}

export async function getServerSideProps(context) {
  console.log("=========getServerSideProps home==============")
  const {req, res} = context;
  console.log("Checar TOKEN:")
  const cookies = new Cookies(req, res)
  const token = cookies.get('token')
  if(token){
    console.log(" token existe")
    console.log("Checar token valido:")
    const response = await checkToken({token: token});
    console.log(" -RESPOSTA: ");
    console.log(response);
    if(response.status){
      console.log("Token valido");
      cookies.set('token', token, {
        httpOnly: false
      })
      console.log("token salvo");
      console.log("pegando dados do banco")
      const items = await getAllItem();
      const _items = items.map(item=>{
        return {
          id: item.id,
          name: item.name,
          description: item.description,
          username: item.username
        }
      })
      console.log(_items);
      console.log("Continuar caminho para /");
      console.log("=========FIM getServerSideProps home==============")
      return { 
        props: { user : {
          username: response.data.username,
          email: response.data.email,
          id: response.data.id,
        }, token_: token, items_: _items },
      }
    }else{
      console.log("Token invalido");
      console.log("REDIRECIONAR PARA /signIn");
      console.log("=========FIM getServerSideProps home==============")
      return { 
        redirect: {
          destination: '/signIn',
          permanent: false,
        },
      }
    }
  }
  console.log("token inexistente")
  console.log("redirecinar para /signIn")
  console.log("=========FIM getServerSideProps home==============")
  return { 
    redirect: {
      destination: '/signIn',
      permanent: false,
    },
  }
}